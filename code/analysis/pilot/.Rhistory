suffix = c("_causal", "_similar")
) %>%
distinct(itemB, .keep_all = TRUE) %>%
mutate(
mean_causal_dissimilarity_causal = round(mean_causal_dissimilarity_causal, 2),
mean_emp_euclidean_causal = round(mean_emp_euclidean_causal, 2),
mean_causal_dissimilarity_similar = round(mean_causal_dissimilarity_similar, 2),
mean_emp_euclidean_similar = round(mean_emp_euclidean_similar, 2)
) %>%
select(
target_item = itemB,
causal_choice = causal_itemA,
causal_distance_causal_choice = mean_causal_dissimilarity_causal,
freesort_distance_causal_choice = mean_emp_euclidean_causal,
similar_choice = similarity_itemA,
causal_distance_similar_choice = mean_causal_dissimilarity_similar,
freesort_distance_similar_choice = mean_emp_euclidean_similar
) %>%
arrange(target_item)
#table with line breaks
pairs_table <- design_pairs %>%
mutate(
causal_choice = paste0(causal_choice, "<br>(", causal_distance_causal_choice, ", ", freesort_distance_causal_choice, ")"),
similar_choice = paste0(similar_choice, "<br>(", causal_distance_similar_choice, ", ", freesort_distance_similar_choice, ")"),
group = case_when(
row_number() %in% 1:5 ~ "mind",
row_number() %in% 6:10 ~ "action",
row_number() %in% 11:15 ~ "body"
)
) %>%
select(target_item, causal_choice, similar_choice, group)
# Generate GT table with markdown rendering
df_table <- pairs_table %>%
gt() %>%
tab_header(
title = "Target and Choice Items",
subtitle = "Distances Between Target, Causal, and Similar Choices"
) %>%
cols_label(
target_item = "Target Item",
causal_choice = md("Causal Choice<br>(Causal D., Freesort D.)"),
similar_choice = md("Similar Choice<br>(Causal D., Freesort D.)")
) %>%
fmt_markdown(columns = c(causal_choice, similar_choice)) %>%  # Interpret markdown for line breaks
tab_style(
style = cell_fill(color = "#f7bf2a"),  # Highlight for 'mind'
locations = cells_body(rows = group == "mind")
) %>%
tab_style(
style = cell_fill(color = "#69ad44"),  # Highlight for 'action'
locations = cells_body(rows = group == "action")
) %>%
tab_style(
style = cell_fill(color = "#f36b2d"),  # Highlight for 'body'
locations = cells_body(rows = group == "body")
) %>%
cols_hide(columns = group) %>%   # Optionally hide the helper column
tab_options(
table.font.names = "Baskerville"
)
# Save
# gtsave(df_table, "pairs-table.html")  # Save as HTML for viewing with color
gtsave(df_table, "pairs-table.png")   # Save as PNG for use in presentations or documents
#==============omitting line breaks
pairs_table <- design_pairs %>%
mutate(
causal_choice = paste0(causal_choice, " (", causal_distance_causal_choice, ", ", freesort_distance_causal_choice, ")"),
similar_choice = paste0(similar_choice, " (", causal_distance_similar_choice, ", ", freesort_distance_similar_choice, ")"),
group = case_when(
row_number() %in% 1:5 ~ "mind",
row_number() %in% 6:10 ~ "action",
row_number() %in% 11:15 ~ "body"
)
) %>%
select(target_item, causal_choice, similar_choice, group)
# Generate GT table with markdown rendering
df_table <- pairs_table %>%
gt() %>%
tab_header(
title = "Target and Choice Items" #,
# subtitle = "Distances Between Target, Causal, and Similar Choices"
) %>%
cols_label(
target_item = "Target Item",
causal_choice = md("Causal Choice<br>(Causal D., Freesort D.)"),
similar_choice = md("Similar Choice<br>(Causal D., Freesort D.)")
) %>%
fmt_markdown(columns = c(causal_choice, similar_choice)) %>%  # Interpret markdown for line breaks
tab_style(
style = cell_fill(color = "#f7bf2a"),  # Highlight for 'mind'
locations = cells_body(rows = group == "mind")
) %>%
tab_style(
style = cell_fill(color = "#69ad44"),  # Highlight for 'action'
locations = cells_body(rows = group == "action")
) %>%
tab_style(
style = cell_fill(color = "#f36b2d"),  # Highlight for 'body'
locations = cells_body(rows = group == "body")
) %>%
cols_hide(columns = group) %>%   # Optionally hide the helper column
tab_options(
table.font.names = "Baskerville"
)
gtsave(df_table, "pairs-table-2.png")   # Save as PNG for use in presentations or documents
dat_summarized <- dat %>%
mutate(response = fct_relevel(response, c("similar", "causal"))) %>%
group_by(condition) %>%
mutate(total = n()) %>%
group_by(condition, response) %>%
summarize(
count = n(),
total = first(total),
mean_proportion = count / total,
se = sqrt(mean_proportion * (1 - mean_proportion) / total),
.groups = "drop")
#stacked
(fig_result_summary <- ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
labs(y = "Proportion"))
#visualize bar heights for writeup
(fig_result_summary <- ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + # Customize bar colors
geom_errorbar(data = filter(dat_summarized, response == "causal"),
aes(ymax = mean_proportion + se, ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
geom_text(aes(label = round(mean_proportion, 2),
y = mean_proportion + 0.02), # Adjust the y position slightly above the bar
position = position_dodge(width = 0.9),
vjust = 0,
color = "white") + # Adjust vertical alignment
theme_cowplot())
dat_prepped <- dat %>%
mutate(
response_binary = ifelse(response == "causal", 1, 0), # Binary outcome (1 = causal)
condition = as.factor(condition) # Ensure condition is a factor
)
model <- glmer(response_binary ~ condition + (1 | subject_id),
data = dat_prepped,
family = binomial)
# Summary of the model
summary(model)
dat_summarized_by_item <- dat %>%
mutate(response = fct_relevel(response, c("similar", "causal"))) %>%
group_by(condition, itemB) %>%
mutate(total = n()) %>%  # Total responses per condition
group_by(condition, itemB, response) %>%
mutate(
count = n(),  # Count responses for each response type
total = first(total),  # Total responses for the condition
mean_proportion = count / total,  # Proportion of response within condition
se = sqrt(mean_proportion * (1 - mean_proportion) / total)) %>%
distinct(condition, itemB, .keep_all = TRUE) %>%
ungroup()
#set x axis colors
itemB_colors <- dat_summarized_by_item %>%
distinct(itemB, domain_itemB) %>%
mutate(color = case_when(
domain_itemB == "bio" ~ "darkgreen",
domain_itemB == "mind" ~ "blue",
domain_itemB == "action" ~ "red"
)) %>%
pull(color, name = itemB)
p <- dat_summarized_by_item %>%
ggplot(aes(x =itemB, y = mean_proportion, fill = response)) +
geom_bar(stat = "identity") +
geom_bar(stat = "identity", colour = "black") +
geom_errorbar(data = filter(dat_summarized_by_item, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
theme_cowplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, color = itemB_colors[levels(dat_summarized_by_item$itemB)])) +
facet_wrap(~condition)
p
p_alt <- dat_summarized_by_item %>%
ggplot(aes(x =condition, y = mean_proportion, fill = response)) +
geom_bar(stat = "identity") +
geom_bar(stat = "identity", colour = "black") +
geom_errorbar(data = filter(dat_summarized_by_item, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
theme_cowplot() +
# theme(axis.text.x = element_text(angle = 45, hjust = 1, color = itemB_colors[levels(dat_summarized_by_item$itemB)])) +
facet_wrap(~itemB, nrow = 3)
p_alt
ggsave(
filename = "figures/study2/p_study2_item-level_stacked.pdf",
plot = p,
device = "pdf",
#path = "path/to/directory", #Optional: specify a directory
width = 12,
height = 6,
units = "in"
)
d_model <- dat %>%
mutate(response = as.factor(response)) %>%
mutate(subject_id = as.factor(subject_id)) %>%
mutate(responses = ifelse(response == "causal", 1, 0)) %>%
mutate(condition = as.factor(condition)) %>%
unite(col = "trial_ID", c(itemB, similarity_itemA, causal_itemA), sep = "_", remove = FALSE)
#model
overall_model <- glmer(responses ~ condition + (1|subject_id), data = d_model, family = binomial(link = 'logit'))
summary(overall_model)
plot(allEffects(overall_model))
check_model(overall_model) # TODO figure out binned resisual issue?
d_freesort_and_causal_distances <- read.csv(paste0(snapshots_input_path, "/diffs.csv")) %>%
mutate(itemB = factor(itemB, levels = desired_order)) %>%
mutate(itemA = factor(itemA, levels = desired_order))
causal_condition <- d_model %>%
# select(-similarity_itemA) %>% # why - let's study both?
filter(condition == "intervention") %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("causal_itemA" = itemA,
"causal_itemA_causal_distance" = mean_causal_dissimilarity,
"causal_itemA_freesort_distance" = mean_emp_euclidean,
"causal_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "causal_itemA")) %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("similarity_itemA" = itemA,
"similarity_itemA_causal_distance" = mean_causal_dissimilarity,
"similarity_itemA_freesort_distance" = mean_emp_euclidean,
"similar_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "similarity_itemA"))
similarity_condition <- d_model %>%
# select(-causal_itemA) %>%
filter(condition == "similarity") %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("causal_itemA" = itemA,
"causal_itemA_causal_distance" = mean_causal_dissimilarity,
"causal_itemA_freesort_distance" = mean_emp_euclidean,
"causal_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "causal_itemA")) %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("similarity_itemA" = itemA,
"similarity_itemA_causal_distance" = mean_causal_dissimilarity,
"similarity_itemA_freesort_distance" = mean_emp_euclidean,
"similar_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "similarity_itemA"))
#Modelling both predictors
both_predictors_model <- glmer(responses ~ causal_itemA_freesort_minus_causal + similar_itemA_freesort_minus_causal + (1|subject_id), data = causal_condition, family = binomial(link = "logit"))
summary(both_predictors_model)
plot(allEffects(both_predictors_model))
check_model(both_predictors_model)
fixed_effects <- fixef(both_predictors_model) #log odds
odds_ratios <- exp(fixed_effects)  #convert log-odds to odds ratios
probabilities <- 1 / (1 + exp(-fixed_effects)) #convert log odds to probability
cat("\nBoth predictors model [intercept] [causal_distance] [freesort_distance]:\n ")
cat("Fixed effects (log odds): ", fixed_effects, "\n")
cat("Fixed effects (odds ratios): ", odds_ratios, "\n")
cat("Fixed effects (probabilities, causal_distance = 0):", probabilities, "\n")
#nb: fixed effects are intercept and slope. slope is change log odds of outcome for a unit increase in predictor
effects_data <- allEffects(both_predictors_model)
causal_effect <- as.data.frame(effects_data$`causal_itemA_freesort_minus_causal`)
similar_effect <- as.data.frame(effects_data$`similar_itemA_freesort_minus_causal`)
causal_effect$Predictor <- "Intervention"
similar_effect$Predictor <- "Inference"
colnames(causal_effect)[1] <- "PredictorValue"
colnames(similar_effect)[1] <- "PredictorValue"
combined_effects <- rbind(causal_effect, similar_effect)
base_plot <- ggplot(combined_effects, aes(x = PredictorValue, y = fit, color = Predictor)) +
geom_line() +
geom_hline(yintercept = .5, linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = Predictor), alpha = 0.2) +
labs(
title = "Probability of Making A Causal Choice",
x = "Choice Item Distance to Target Item",
y = "Probability",
color = "Condition",
fill = "Condition"
) +
theme_cowplot() +
# scale_x_continuous(
#   breaks = c(min(combined_effects$PredictorValue), max(combined_effects$PredictorValue)),
#   labels = c("More similar, \nless causal", "More causal, \nless similar")
# ) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
# legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
plot.margin = margin(20, 20, 50, 20)
)
# Add annotations below the x-axis using cowplot's ggdraw
ggdraw(base_plot) +
draw_label(
label = "More similar,\nless causal",
x = 0.1, y = 0.02, hjust = 0, vjust = 0, size = 16
) +
draw_label(
label = " More causal,\nless similar",
x = 0.8, y = 0.02, hjust = 1, vjust = 0, size = 16
)
effects_data
causal_condition
causal_effect
effects_data <- allEffects(both_predictors_model)
effects_data
as.data.frame(effects_data$`causal_itemA_freesort_minus_causal`)
causal_effect <- as.data.frame(effects_data$`causal_itemA_freesort_minus_causal`)
similar_effect <- as.data.frame(effects_data$`similar_itemA_freesort_minus_causal`)
causal_effec
causal_effect
effects_data
as.data.frame(effects_data$`causal_itemA_freesort_minus_causal`)
summary(both_predictors_model)
plot(allEffects(both_predictors_model))
causal_effect$Predictor <- "Causal Item"
similar_effect$Predictor <- "Similar Item"
colnames(causal_effect)[1] <- "PredictorValue"
colnames(similar_effect)[1] <- "PredictorValue"
combined_effects <- rbind(causal_effect, similar_effect)
base_plot <- ggplot(combined_effects, aes(x = PredictorValue, y = fit, color = Predictor)) +
geom_line() +
geom_hline(yintercept = .5, linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = Predictor), alpha = 0.2) +
labs(
title = "Probability of Making A Causal Choice",
x = "Choice Item Distance to Target Item",
y = "Probability",
color = "Condition",
fill = "Condition"
) +
theme_cowplot() +
# scale_x_continuous(
#   breaks = c(min(combined_effects$PredictorValue), max(combined_effects$PredictorValue)),
#   labels = c("More similar, \nless causal", "More causal, \nless similar")
# ) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
# legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
plot.margin = margin(20, 20, 50, 20)
)
# Add annotations below the x-axis using cowplot's ggdraw
ggdraw(base_plot) +
draw_label(
label = "More similar,\nless causal",
x = 0.1, y = 0.02, hjust = 0, vjust = 0, size = 16
) +
draw_label(
label = " More causal,\nless similar",
x = 0.8, y = 0.02, hjust = 1, vjust = 0, size = 16
)
base_plot <- ggplot(combined_effects, aes(x = PredictorValue, y = fit, color = Predictor)) +
geom_line() +
geom_hline(yintercept = .5, linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = Predictor), alpha = 0.2) +
labs(
title = "Probability of Making A Causal Choice",
x = "Choice Item Distance to Target Item",
y = "Probability",
color = "Item",
fill = "Item"
) +
theme_cowplot() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
# legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
plot.margin = margin(20, 20, 50, 20)
)
ggdraw(base_plot) + #add annotations below the x-axis using cowplot's ggdraw
draw_label(
label = "More similar,\nless causal",
x = 0.1, y = 0.02, hjust = 0, vjust = 0, size = 16
) +
draw_label(
label = " More causal,\nless similar",
x = 0.8, y = 0.02, hjust = 1, vjust = 0, size = 16
)
base_plot <- ggplot(combined_effects, aes(x = PredictorValue, y = fit, color = Predictor)) +
geom_line() +
geom_hline(yintercept = .5, linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = Predictor), alpha = 0.2) +
labs(
title = "Probability of Making A Causal Choice in Causal condition",
x = "Choice Item Distance to Target Item",
y = "Probability",
color = "Item",
fill = "Item"
) +
theme_cowplot() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
# legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
plot.margin = margin(20, 20, 50, 20)
)
ggdraw(base_plot) + #add annotations below the x-axis using cowplot's ggdraw
draw_label(
label = "More similar,\nless causal",
x = 0.1, y = 0.02, hjust = 0, vjust = 0, size = 16
) +
draw_label(
label = " More causal,\nless similar",
x = 0.8, y = 0.02, hjust = 1, vjust = 0, size = 16
)
# Modelling predictors jointly
both_predictors_model <- glmer(responses ~ causal_itemA_freesort_minus_causal + similar_itemA_freesort_minus_causal + (1|subject_id), data = similarity_condition, family = binomial(link = "logit")) # TODO figure out failure to converge here
similarity_condition
d_model %>%
# select(-causal_itemA) %>%
filter(condition == "similarity") %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("causal_itemA" = itemA,
"causal_itemA_causal_distance" = mean_causal_dissimilarity,
"causal_itemA_freesort_distance" = mean_emp_euclidean,
"causal_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "causal_itemA")) %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("similarity_itemA" = itemA,
"similarity_itemA_causal_distance" = mean_causal_dissimilarity,
"similarity_itemA_freesort_distance" = mean_emp_euclidean,
"similar_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "similarity_itemA"))
d_model %>%
# select(-causal_itemA) %>%
filter(condition == "similarity")
d_model
d_model %>%
# select(-causal_itemA) %>%
filter(condition == "inference")
similarity_condition <- d_model %>%
# select(-causal_itemA) %>%
filter(condition == "inference") %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("causal_itemA" = itemA,
"causal_itemA_causal_distance" = mean_causal_dissimilarity,
"causal_itemA_freesort_distance" = mean_emp_euclidean,
"causal_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "causal_itemA")) %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("similarity_itemA" = itemA,
"similarity_itemA_causal_distance" = mean_causal_dissimilarity,
"similarity_itemA_freesort_distance" = mean_emp_euclidean,
"similar_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "similarity_itemA"))
# Modelling predictors jointly
both_predictors_model <- glmer(responses ~ causal_itemA_freesort_minus_causal + similar_itemA_freesort_minus_causal + (1|subject_id), data = similarity_condition, family = binomial(link = "logit")) # TODO figure out failure to converge here
# Modelling predictors jointly
both_predictors_model <- glmer(responses ~ causal_itemA_freesort_minus_causal + similar_itemA_freesort_minus_causal, data = similarity_condition, family = binomial(link = "logit")) # TODO figure out failure to converge here
similarity_condition <- similarity_condition %>%
mutate(
causal_scaled = scale(causal_itemA_freesort_minus_causal),
similar_scaled = scale(similar_itemA_freesort_minus_causal)
)
both_predictors_model <- glmer(
responses ~ causal_scaled + similar_scaled + (1 | subject_id),
data = similarity_condition,
family = binomial(link = "logit")
)
similarity_condition <- d_model %>%
# select(-causal_itemA) %>%
filter(condition == "inference") %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("causal_itemA" = itemA,
"causal_itemA_causal_distance" = mean_causal_dissimilarity,
"causal_itemA_freesort_distance" = mean_emp_euclidean,
"causal_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "causal_itemA")) %>%
left_join(d_freesort_and_causal_distances %>%
select(itemA, itemB, mean_causal_dissimilarity, mean_emp_euclidean, euclidean_minus_causal) %>%
rename("similarity_itemA" = itemA,
"similarity_itemA_causal_distance" = mean_causal_dissimilarity,
"similarity_itemA_freesort_distance" = mean_emp_euclidean,
"similar_itemA_freesort_minus_causal" = euclidean_minus_causal),
by = c("itemB", "similarity_itemA"))
table(similarity_condition$responses)
both_predictors_model <- glm(
responses ~ causal_itemA_freesort_minus_causal + similar_itemA_freesort_minus_causal,
data = similarity_condition,
family = binomial(link = "logit")
)
summary(both_predictors_model)
plot(allEffects(both_predictors_model))
plot(allEffects(overall_model))
