mutate(condition = as.factor(condition)) %>%
rowwise() %>%
mutate(response = case_when(
grepl(causal_itemA, selected_choice) ~ "causal",
grepl(similarity_itemA, selected_choice) ~ "similar",
TRUE ~ "other"
)) %>%
ungroup() %>%
select(subject_id, condition, itemB, causal_itemA, similar_itemA, response) %>%
mutate(causal_itemA = factor(causal_itemA, levels = desired_order),
similar_itemA = factor(similar_itemA, levels = desired_order),
itemB = factor(itemB, levels = desired_order)) %>%
mutate(domain_itemB = case_when(itemB == "hear something" ~ "mind", #labels for first item of pair
itemB == "choose what to do" ~ "mind",
itemB == "remember something" ~ "mind",
itemB == "think about something" ~ "mind",
itemB == "see something" ~ "mind",
itemB == "reach for something" ~ "action",
itemB == "sit down" ~ "action",
itemB == "jump up and down" ~ "action",
itemB == "kick something" ~ "action",
itemB == "take a walk" ~ "action",
itemB == "get tired" ~ "bio",
itemB == "become hungry" ~ "bio",
itemB == "feel scared"~ "bio",
itemB == "experience pain"~ "bio",
itemB == "get sick"~ "bio"),
domain_causalitemA = case_when(causal_itemA == "hear something" ~ "mind",
causal_itemA == "choose what to do" ~ "mind",
causal_itemA == "remember something" ~ "mind",
causal_itemA == "think about something" ~ "mind",
causal_itemA == "see something" ~ "mind",
causal_itemA == "reach for something" ~ "action",
causal_itemA == "sit down" ~ "action",
causal_itemA == "jump up and down" ~ "action",
causal_itemA == "kick something" ~ "action",
causal_itemA == "take a walk" ~ "action",
causal_itemA == "get tired" ~ "bio",
causal_itemA == "become hungry" ~ "bio",
causal_itemA == "feel scared"~ "bio",
causal_itemA == "experience pain"~ "bio",
causal_itemA == "get sick"~ "bio"),
domain_similarityitemA = case_when(similarity_itemA == "hear something" ~ "mind",
similarity_itemA == "choose what to do" ~ "mind",
similarity_itemA == "remember something" ~ "mind",
similarity_itemA == "think about something" ~ "mind",
similarity_itemA == "see something" ~ "mind",
similarity_itemA == "reach for something" ~ "action",
similarity_itemA == "sit down" ~ "action",
similarity_itemA == "jump up and down" ~ "action",
similarity_itemA == "kick something" ~ "action",
similarity_itemA == "take a walk" ~ "action",
similarity_itemA == "get tired" ~ "bio",
similarity_itemA == "become hungry" ~ "bio",
similarity_itemA == "feel scared"~ "bio",
similarity_itemA == "experience pain"~ "bio",
similarity_itemA == "get sick"~ "bio"))
dat <- d %>%
filter(!subject_id %in% subjects_to_exclude) %>% #exclude 1 subject who failed attn check
filter(condition %in% c("causal", "similar")) %>%
mutate(response = as.factor(response)) %>%
mutate(condition = as.factor(condition)) %>%
rowwise() %>%
mutate(response = case_when(
grepl(causal_itemA, selected_choice) ~ "causal",
grepl(similar_itemA, selected_choice) ~ "similar",
TRUE ~ "other"
)) %>%
ungroup() %>%
select(subject_id, condition, itemB, causal_itemA, similar_itemA, response) %>%
mutate(causal_itemA = factor(causal_itemA, levels = desired_order),
similar_itemA = factor(similar_itemA, levels = desired_order),
itemB = factor(itemB, levels = desired_order)) %>%
mutate(domain_itemB = case_when(itemB == "hear something" ~ "mind", #labels for first item of pair
itemB == "choose what to do" ~ "mind",
itemB == "remember something" ~ "mind",
itemB == "think about something" ~ "mind",
itemB == "see something" ~ "mind",
itemB == "reach for something" ~ "action",
itemB == "sit down" ~ "action",
itemB == "jump up and down" ~ "action",
itemB == "kick something" ~ "action",
itemB == "take a walk" ~ "action",
itemB == "get tired" ~ "bio",
itemB == "become hungry" ~ "bio",
itemB == "feel scared"~ "bio",
itemB == "experience pain"~ "bio",
itemB == "get sick"~ "bio"),
domain_causalitemA = case_when(causal_itemA == "hear something" ~ "mind",
causal_itemA == "choose what to do" ~ "mind",
causal_itemA == "remember something" ~ "mind",
causal_itemA == "think about something" ~ "mind",
causal_itemA == "see something" ~ "mind",
causal_itemA == "reach for something" ~ "action",
causal_itemA == "sit down" ~ "action",
causal_itemA == "jump up and down" ~ "action",
causal_itemA == "kick something" ~ "action",
causal_itemA == "take a walk" ~ "action",
causal_itemA == "get tired" ~ "bio",
causal_itemA == "become hungry" ~ "bio",
causal_itemA == "feel scared"~ "bio",
causal_itemA == "experience pain"~ "bio",
causal_itemA == "get sick"~ "bio"),
domain_similarityitemA = case_when(similarity_itemA == "hear something" ~ "mind",
similarity_itemA == "choose what to do" ~ "mind",
similarity_itemA == "remember something" ~ "mind",
similarity_itemA == "think about something" ~ "mind",
similarity_itemA == "see something" ~ "mind",
similarity_itemA == "reach for something" ~ "action",
similarity_itemA == "sit down" ~ "action",
similarity_itemA == "jump up and down" ~ "action",
similarity_itemA == "kick something" ~ "action",
similarity_itemA == "take a walk" ~ "action",
similarity_itemA == "get tired" ~ "bio",
similarity_itemA == "become hungry" ~ "bio",
similarity_itemA == "feel scared"~ "bio",
similarity_itemA == "experience pain"~ "bio",
similarity_itemA == "get sick"~ "bio"))
dat <- d %>%
filter(!subject_id %in% subjects_to_exclude) %>% #exclude 1 subject who failed attn check
filter(condition %in% c("causal", "similar")) %>%
mutate(response = as.factor(response)) %>%
mutate(condition = as.factor(condition)) %>%
rowwise() %>%
mutate(response = case_when(
grepl(causal_itemA, selected_choice) ~ "causal",
grepl(similar_itemA, selected_choice) ~ "similar",
TRUE ~ "other"
)) %>%
ungroup() %>%
select(subject_id, condition, itemB, causal_itemA, similar_itemA, response) %>%
mutate(causal_itemA = factor(causal_itemA, levels = desired_order),
similar_itemA = factor(similar_itemA, levels = desired_order),
itemB = factor(itemB, levels = desired_order)) %>%
mutate(domain_itemB = case_when(itemB == "hear something" ~ "mind", #labels for first item of pair
itemB == "choose what to do" ~ "mind",
itemB == "remember something" ~ "mind",
itemB == "think about something" ~ "mind",
itemB == "see something" ~ "mind",
itemB == "reach for something" ~ "action",
itemB == "sit down" ~ "action",
itemB == "jump up and down" ~ "action",
itemB == "kick something" ~ "action",
itemB == "take a walk" ~ "action",
itemB == "get tired" ~ "bio",
itemB == "become hungry" ~ "bio",
itemB == "feel scared"~ "bio",
itemB == "experience pain"~ "bio",
itemB == "get sick"~ "bio"),
domain_causalitemA = case_when(causal_itemA == "hear something" ~ "mind",
causal_itemA == "choose what to do" ~ "mind",
causal_itemA == "remember something" ~ "mind",
causal_itemA == "think about something" ~ "mind",
causal_itemA == "see something" ~ "mind",
causal_itemA == "reach for something" ~ "action",
causal_itemA == "sit down" ~ "action",
causal_itemA == "jump up and down" ~ "action",
causal_itemA == "kick something" ~ "action",
causal_itemA == "take a walk" ~ "action",
causal_itemA == "get tired" ~ "bio",
causal_itemA == "become hungry" ~ "bio",
causal_itemA == "feel scared"~ "bio",
causal_itemA == "experience pain"~ "bio",
causal_itemA == "get sick"~ "bio"),
domain_similarityitemA = case_when(similar_itemA == "hear something" ~ "mind",
similar_itemA == "choose what to do" ~ "mind",
similar_itemA == "remember something" ~ "mind",
similar_itemA == "think about something" ~ "mind",
similar_itemA == "see something" ~ "mind",
similar_itemA == "reach for something" ~ "action",
similar_itemA == "sit down" ~ "action",
similar_itemA == "jump up and down" ~ "action",
similar_itemA == "kick something" ~ "action",
similar_itemA == "take a walk" ~ "action",
similar_itemA == "get tired" ~ "bio",
similar_itemA == "become hungry" ~ "bio",
similar_itemA == "feel scared"~ "bio",
similar_itemA == "experience pain"~ "bio",
similar_itemA == "get sick"~ "bio"))
dat_summarized <- dat %>%
mutate(response = fct_relevel(response, c("similar", "causal"))) %>%
group_by(condition) %>%
mutate(total = n()) %>%
group_by(condition, response) %>%
summarize(
count = n(),
total = first(total),
mean_proportion = count / total,
se = sqrt(mean_proportion * (1 - mean_proportion) / total),
.groups = "drop")
#stacked
(fig_result_summary <- ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
labs(y = "Proportion"))
#fig_result_summary <-
ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
labs(y = "Proportion")
#fig_result_summary <-
ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = 50, linetype = "dashed") +
labs(y = "Proportion")
#fig_result_summary <-
ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
# geom_hline(yintercept = 50, linetype = "dashed") +
labs(y = "Proportion")
#fig_result_summary <-
ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion")
#fig_result_summary <-
ggplot(dat_summarized, aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
dat_summarized
dat_summarized %>%
mutate(condition = ifelse(condition == "causal", "Causal", "Granting Trait")) %>%
ggplot( aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
dat_summarized %>%
mutate(condition = ifelse(condition == "causal", "Causal", "Granting Trait"))
dat_summarized %>%
# mutate(condition = ifelse(condition == "causal", "Causal", "Granting Trait")) %>%
ggplot( aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
dat_summarized %>%
mutate(condition = ifelse(condition == "causal", "Causal", "Granting Trait")) %>%
ggplot(aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
dat_summarized
dat_summarized <- dat %>%
mutate(response = fct_relevel(response, c("similar", "causal"))) %>%
mutate(condition = ifelse(condition == "causal", "Causal", "Granting Trait")) %>%
group_by(condition) %>%
mutate(total = n()) %>%
group_by(condition, response) %>%
summarize(
count = n(),
total = first(total),
mean_proportion = count / total,
se = sqrt(mean_proportion * (1 - mean_proportion) / total),
.groups = "drop")
dat_summarized %>%
ggplot(aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
dat_summarized <- dat %>%
mutate(response = fct_relevel(response, c("similar", "causal"))) %>%
mutate(condition = ifelse(condition == "causal", "Intervening on Someone", "Granting Trait")) %>%
group_by(condition) %>%
mutate(total = n()) %>%
group_by(condition, response) %>%
summarize(
count = n(),
total = first(total),
mean_proportion = count / total,
se = sqrt(mean_proportion * (1 - mean_proportion) / total),
.groups = "drop")
dat_summarized %>%
ggplot(aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
dat_summarized <- dat %>%
mutate(response = fct_relevel(response, c("similar", "causal"))) %>%
mutate(condition = ifelse(condition == "causal", "Making Someone do Something", "Giving Creature Ability")) %>%
group_by(condition) %>%
mutate(total = n()) %>%
group_by(condition, response) %>%
summarize(
count = n(),
total = first(total),
mean_proportion = count / total,
se = sqrt(mean_proportion * (1 - mean_proportion) / total),
.groups = "drop")
dat_summarized %>%
ggplot(aes(x = condition, y = mean_proportion, fill = response)) +
geom_point() +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("grey80", "#000000")) + #or whatever you'd like!
geom_errorbar(data = filter(dat_summarized, response == "causal"), aes(ymax = mean_proportion + se,
ymin = mean_proportion - se),
stat = "identity", position = "identity", width = 0.3) +
theme_cowplot() +
geom_hline(yintercept = .5, linetype = "dashed") +
labs(y = "Proportion",
x = "Intervention Type")
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 1, digits = 3)
library(pacman)
pacman::p_load(plyr,
tidyverse,
metafor,
lme4,
lmerTest,
cowplot,
easystats,
sjPlot,
kableExtra,
easystats,
patchwork,
plotly
)
sessionInfo()
mapp_data <- read_csv("data/MA_MAPP_data_jo.csv") %>%
rename("F_value" = `F`,
"t_value" = t) %>%
mutate(n = ifelse(is.na(n), 43, n)) %>% #imputing this missing N from the tm_ne sheet
mutate(F_value = ifelse(F_value == "< 2.69", 2.69, F_value)) %>% #treating f < 2.69 as f = 2.69
mutate(F_value = as.numeric(F_value)) %>%
filter(uniqueID != 93) %>% #remove condition with only test trial means (no sd, ses, F or t)
mutate(wilcoxonZ = ifelse(uniqueID == "93", 1.97, NA),
wilcoxonZ = ifelse(uniqueID == "94", 3.51, NA))
mapp_data_long <- mapp_data %>%
pivot_longer(cols = exp_mean:unexp_mean,
names_to = "trial_type",
values_to = "looking_sec")
p <- ggplot(mapp_data_long, aes(trial_type, looking_sec)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(size = n, color = uniqueID), alpha = .5) +
geom_line(data = mapp_data_long, aes(x = trial_type, y = looking_sec, group = uniqueID), alpha = .1) +
stat_summary(fun = "mean", geom = "point", shape = 23, fill = "white", size = 3.5) +
facet_wrap(~task) +
theme_bw() +
theme(legend.position = "none")
p
read_csv("data/MA_MAPP_data_jo.csv") %>%
rename("F_value" = `F`,
"t_value" = t) %>%
mutate(n = ifelse(is.na(n), 43, n)) %>% #imputing this missing N from the tm_ne sheet
mutate(F_value = ifelse(F_value == "< 2.69", 2.69, F_value)) %>% #treating f < 2.69 as f = 2.69
mutate(F_value = as.numeric(F_value)) %>%
filter(uniqueID != 93) %>% #remove condition with only test trial means (no sd, ses, F or t)
mutate(wilcoxonZ = ifelse(uniqueID == "93", 1.97, NA),
wilcoxonZ = ifelse(uniqueID == "94", 3.51, NA))
mapp_data %>%
select(!shortid:sd_age) %>%
select(!n_female:looped) %>%
filter(uniqueID == 20) %>%
mutate(unexp_se = 0.68,
exp_se = 0.69) %>%
mutate(
exp_sd = ifelse(is.na(exp_sd), exp_se * sqrt(n), exp_sd),
unexp_sd = ifelse(is.na(unexp_sd), unexp_se * sqrt(n), unexp_sd),
pooled_sd = sqrt(((n - 1) * exp_sd^2 + (n - 1) * unexp_sd^2) / (2 * n - 2)),
smd = (unexp_mean - exp_mean) / pooled_sd) %>%
mutate(
smd2 = ifelse(!is.na(F_value), F_value / sqrt(n), smd))
mapp_data %>%
select(!shortid:sd_age) %>%
select(!n_female:looped) %>%
filter(uniqueID == 20) %>%
mutate(
unexp_se = 0.68,
exp_se = 0.69,
exp_sd = ifelse(is.na(exp_sd), exp_se * sqrt(n), exp_sd),
unexp_sd = ifelse(is.na(unexp_sd), unexp_se * sqrt(n), unexp_sd),
pooled_sd = sqrt(((n - 1) * exp_sd^2 + (n - 1) * unexp_sd^2) / (2 * n - 2)),
smd = (unexp_mean - exp_mean) / pooled_sd,
# alternative smd using invalid short-form formula
smd2 = ifelse(!is.na(F_value), F_value / sqrt(n), smd),
# correct degrees of freedom
df1 = 1,
df2 = 122,  # from F(1, 122)
# use total sample size from the F-test
n_total = 124,
n_per_group = 62,
# correct formula for smd from F using total N
smd3 = ifelse(!is.na(F_value),
sqrt((F_value * n_total) / (n_per_group^2)),
smd)
)
#===
mapp_data %>%
select(!shortid:sd_age) %>%
select(!n_female:looped) %>%
filter(uniqueID == 20) %>%
mutate(
# Standard errors extracted from figure
unexp_se = 0.68,
exp_se = 0.69,
# Sample size used to compute SD from SE (from figure — 8-month-olds only)
n_plot = 23,
# Compute SDs from SEs using n_plot
exp_sd = ifelse(is.na(exp_sd), exp_se * sqrt(n_plot), exp_sd),
unexp_sd = ifelse(is.na(unexp_sd), unexp_se * sqrt(n_plot), unexp_sd),
# Pooled SD from exp/unexp SDs
pooled_sd = sqrt(((n_plot - 1) * exp_sd^2 + (n_plot - 1) * unexp_sd^2) / (2 * n_plot - 2)),
# Standardized mean difference from group means and pooled SD
smd = (unexp_mean - exp_mean) / pooled_sd,
# Optional (but invalid) quick estimate using F/sqrt(n)
smd2 = ifelse(!is.na(F_value), F_value / sqrt(n_plot), smd),
# Use correct total sample size for SMD from F
df1 = 1,
df2 = 122,          # from F(1, 122)
n_total = 124,      # total sample size from F-test
n_per_group = 62,   # assumed equal group sizes
# Correct formula for SMD from F
smd3 = ifelse(!is.na(F_value),
sqrt((F_value * n_total) / (n_per_group^2)),
smd)
)
mapp_data_smd <- mapp_data %>%
mutate(
exp_sd = ifelse(is.na(exp_sd), exp_se * sqrt(n), exp_sd),
unexp_sd = ifelse(is.na(unexp_sd), unexp_se * sqrt(n), unexp_sd),
pooled_sd = sqrt(((n - 1) * exp_sd^2 + (n - 1) * unexp_sd^2) / (2 * n - 2)),
smd = (unexp_mean - exp_mean) / pooled_sd,
smd = ifelse(!is.na(F_value), F_value / sqrt(n), smd),
smd = ifelse(!is.na(t_value), t_value / sqrt(n), smd),
smd = ifelse(uniqueID == "76", 0.429, smd),  #beta coeffiecient is itself standardized
smd = ifelse(!is.na(wilcoxonZ), wilcoxonZ / sqrt(n), smd),
yi = smd,
vi = (1 / n) + (smd^2 / (2 * (n - 1)))
)
mapp_data_smd %>%
ggplot(aes(x = mean_age, y = smd, color = task)) +
geom_smooth(method = lm) +
geom_point() +
theme_bw()
ggplot(mapp_data_smd, aes(mean_age, yi)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~task) +
theme_bw()
ggplot(mapp_data_smd, aes(mean_age, yi)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~task) +
theme_bw()
