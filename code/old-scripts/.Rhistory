other_upper <- as.numeric(other_avg_rdm[upper.tri(other_avg_rdm)])
grand_upper <- as.numeric(grand_avg_rdm[upper.tri(grand_avg_rdm)])
lower_bound[i] <- cor(subject_upper, other_upper, method = metric)
upper_bound[i] <- cor(subject_upper, grand_upper, method = metric)
}
# Return average bounds
list(
upper_bound = mean(upper_bound, na.rm = TRUE),
lower_bound = mean(lower_bound, na.rm = TRUE)
)
}
calculate_causal_noise_ceiling <- function(data, subjects, desired_order, metric = "kendall") {
#Initialize storage for correlations
upper_tri_upper_bound <- numeric(length(subjects))
upper_tri_lower_bound <- numeric(length(subjects))
lower_tri_upper_bound <- numeric(length(subjects))
lower_tri_lower_bound <- numeric(length(subjects))
#Loop through each subject
for (i in seq_along(subjects)) {
subject <- subjects[i]
#subject's RDM
subject_rdm <- data %>%
filter(subject_id == subject) %>%
select(subject_id, itemA, itemB, causal_distance) %>%
pivot_wider(names_from = itemB, values_from = causal_distance) %>%
column_to_rownames("itemA") %>%
as.matrix()
subject_rdm <- subject_rdm[desired_order, desired_order]
#grand average RDM
grand_avg_rdm <- data %>%
select(subject_id, itemA, itemB, causal_distance) %>%
unite("item_pairs", itemA, itemB, sep = "_", remove = FALSE) %>%
group_by(item_pairs) %>%
mutate(causal_distance = mean(causal_distance)) %>%
ungroup() %>%
distinct(item_pairs, .keep_all = TRUE) %>%
select(-c(item_pairs, subject_id)) %>%
pivot_wider(names_from = itemB, values_from = causal_distance) %>%
column_to_rownames("itemA") %>%
as.matrix()
grand_avg_rdm <- grand_avg_rdm[desired_order, desired_order]
#other subjects' average RDM
other_avg_rdm <- data %>%
select(subject_id, itemA, itemB, causal_distance) %>%
filter(subject_id != subject) %>%
unite("item_pairs", itemA, itemB, sep = "_", remove = FALSE) %>%
group_by(item_pairs) %>%
mutate(causal_distance = mean(causal_distance)) %>%
ungroup() %>%
distinct(item_pairs, .keep_all = TRUE) %>%
select(-c(item_pairs, subject_id)) %>%
pivot_wider(names_from = itemB, values_from = causal_distance) %>%
column_to_rownames("itemA") %>%
as.matrix()
other_avg_rdm <- other_avg_rdm[desired_order, desired_order]
#upper tri noise ceiling
subject_upper <- as.numeric(subject_rdm[upper.tri(subject_rdm)])
other_upper <- as.numeric(other_avg_rdm[upper.tri(other_avg_rdm)])
grand_upper <- as.numeric(grand_avg_rdm[upper.tri(grand_avg_rdm)])
upper_tri_lower_bound[i] <- cor(subject_upper, other_upper, method = metric)
upper_tri_upper_bound[i] <- cor(subject_upper, grand_upper, method = metric)
#lower tri noise ceiling
subject_lower <- as.numeric(subject_rdm[lower.tri(subject_rdm)])
other_lower <- as.numeric(other_avg_rdm[lower.tri(other_avg_rdm)])
grand_lower <- as.numeric(grand_avg_rdm[lower.tri(grand_avg_rdm)])
lower_tri_lower_bound[i] <- cor(subject_lower, other_lower, method = metric)
lower_tri_upper_bound[i] <- cor(subject_lower, grand_lower, method = metric)
}
#return average bounds
list(
upper_tri_upper_bound = mean(upper_tri_upper_bound, na.rm = TRUE),
upper_tri_lower_bound = mean(upper_tri_lower_bound, na.rm = TRUE),
lower_tri_upper_bound = mean(lower_tri_upper_bound, na.rm = TRUE),
lower_tri_lower_bound = mean(lower_tri_lower_bound, na.rm = TRUE)
)
}
#create correlations data frame
d_model_predictions <- read_csv(model_predictions_input_path)
d_freesort_correlations <- df_combined %>%
left_join(d_model_predictions, by = c("itemA", "itemB")) %>%
group_by(subject_id) %>%
mutate(
`1_Mind-Body-Action` = compute_rdm_correlation(pick(everything()), freesort_distance, `theor1_Mind-Body-Action`, desired_order),
`2_PerCog-ObjDir-Stimulus` = compute_rdm_correlation(pick(everything()), freesort_distance, `theor2_PerCog-OdActSpAct-BodyStimBodynoStim`, desired_order),
`3_Physical-Ethereal` = compute_rdm_correlation(pick(everything()), freesort_distance, `theor3_Physical-Ethereal`, desired_order),
`4_cosine_similarity` = compute_rdm_correlation(pick(everything()), freesort_distance, `theor4_cosine_similarity`, desired_order),
`5_causal_judgments` = compute_rdm_correlation(pick(everything()), freesort_distance, `causal_distance`, desired_order)
) %>%
ungroup() %>%
relocate(causal_distance, .after = "freesort_distance")
subjects_freesort <- unique(d_freesort_correlations$subject_id)
noise_ceiling_sorting <- calculate_freesort_noise_ceiling(d_freesort_correlations, subjects_freesort, desired_order)
noise_ceiling_sorting
d_causal_correlations <-  df_combined %>%
left_join(d_model_predictions, by = c("itemA", "itemB")) %>%
group_by(subject_id) %>%
mutate(
`1_Mind-Body-Action` = compute_rdm_correlation(pick(everything()), causal_distance, `theor1_Mind-Body-Action`, desired_order),
`2_PerCog-ObjDir-Stimulus` = compute_rdm_correlation(pick(everything()), causal_distance, `theor2_PerCog-OdActSpAct-BodyStimBodynoStim`, desired_order),
`3_Physical-Ethereal` = compute_rdm_correlation(pick(everything()), causal_distance, `theor3_Physical-Ethereal`, desired_order),
`4_cosine_similarity` = compute_rdm_correlation(pick(everything()), causal_distance, `theor4_cosine_similarity`, desired_order),
`5_causal_judgments` = compute_rdm_correlation(pick(everything()), causal_distance, `causal_distance`, desired_order)
) %>%
ungroup()
# Compute noise ceiling for all subjects
subjects_causal <- unique(d_causal_correlations$subject_id)
noise_ceiling_causal <- calculate_causal_noise_ceiling(d_causal_correlations,subjects_causal, desired_order)
noise_ceiling_causal
aggregated_freesort_correlations <- d_freesort_correlations %>%
rename("3 Category" = `1_Mind-Body-Action`,
"6 Category" = `2_PerCog-ObjDir-Stimulus`,
"2 Category" = `3_Physical-Ethereal`,
"Cosine Similarity" = `4_cosine_similarity`) %>%
pivot_longer(
cols = c("2 Category", "3 Category", "6 Category", "Cosine Similarity"),
names_to = "correlation_type",
values_to = "correlation_value"
) %>%
group_by(subject_id, correlation_type) %>%
summarize(mean_correlation = mean(correlation_value, na.rm = TRUE), .groups = "drop") %>%
mutate(method = "Sorting Task")
aggregated_causal_correlations <- d_causal_correlations %>%
rename("3 Category" = `1_Mind-Body-Action`,
"6 Category" = `2_PerCog-ObjDir-Stimulus`,
"2 Category" = `3_Physical-Ethereal`,
"Cosine Similarity" = `4_cosine_similarity`) %>%
pivot_longer(
cols = c("2 Category", "3 Category", "6 Category", "Cosine Similarity"),
names_to = "correlation_type",
values_to = "correlation_value"
) %>%
group_by(subject_id, correlation_type) %>%
summarize(mean_correlation = mean(correlation_value, na.rm = TRUE), .groups = "drop") %>%
mutate(method = "Causal Task")
#combine both corrs into one
d_combined_correlations <- bind_rows(aggregated_freesort_correlations, aggregated_causal_correlations) %>%
mutate(method = factor(method, levels = c("Sorting Task", "Causal Task")))
bar_plot <- ggplot(d_combined_correlations,
aes(x = reorder(correlation_type, mean_correlation, FUN = function(x) -mean(x)),
y = mean_correlation, fill = method)) +
stat_summary(
fun = "mean",
geom = "bar",
position = "dodge",
color = "black"
) +
stat_summary(
fun.data = mean_se,
geom = "errorbar",
width = 0.3,
position = position_dodge(width = 0.9),
color = "black"
) +
geom_point(aes(color = method), alpha = 0.3, size = 3, position = position_jitterdodge(jitter.width = 0.2)) +
scale_fill_manual(values = c("Sorting Task" = "grey80", "Causal Task" = "#000000")) + #bar fill
scale_color_manual(values = c("Sorting Task" = "darkgray", "Causal Task" = "#4A4A4A")) + #point colors
geom_hline(yintercept = noise_ceiling_sorting$upper_bound, color = "darkgray", linetype = "dashed", linewidth = 0.5) +
geom_hline(yintercept = noise_ceiling_sorting$lower_bound, color = "darkgray", linetype = "dashed", linewidth = 0.5) +
geom_hline(yintercept = noise_ceiling_causal$upper_tri_upper_bound, color = "black", linetype = "dashed", linewidth = 0.5) +
geom_hline(yintercept = noise_ceiling_causal$upper_tri_lower_bound, color = "black", linetype = "dashed", linewidth = 0.5) +
theme_cowplot() +
theme(
panel.background = element_rect(fill = NA, color = NA),
plot.background = element_rect(fill = NA, color = NA),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 16),
axis.ticks.length = unit(.25, "cm"),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 18),
legend.position = "top",
legend.title = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.margin = margin(t = 10, r = 10, b = 20, l = 20)
) +
labs(
y = "Kendall's Tau Correlations",
title = "Comparison of Theoretical and Empirical RDM Correlations"
)
# Load and create RDM images
rdm_2_category <- ggdraw() + draw_image(paste0(rdms_input_path, "/theory_4.png"), scale = 1.2)
rdm_3_category <- ggdraw() + draw_image(paste0(rdms_input_path, "/theory_2.png"), scale = 1.2)
rdm_6_category <- ggdraw() + draw_image(paste0(rdms_input_path, "/theory_3.png"), scale = 1.2)
rdm_cosine <- ggdraw() + draw_image(paste0(rdms_input_path, "/theory_1.png"), scale = 1.2)
rdm_row <- rdm_3_category + rdm_6_category + rdm_2_category + rdm_cosine +
plot_layout(ncol = 4)
#
# plot_correlations <- bar_plot / rdm_row +
#   plot_layout(heights = c(5, 2)) #adjusts height ratio
plot_correlations <- bar_plot / rdm_row +
plot_layout(heights = c(5, 2)) &
theme(plot.background = element_rect(fill = NA, color = NA))
plot_correlations
# ggsave(
#   filename = "figures/rdm_correlation_plot.pdf",
#   plot = plot_correlations,
#   device = "pdf",
#   #path = "path/to/directory",
#   width = 12,
#   height = 5,
#   units = "in"
# )
ggsave(
filename = "figures/rdm_correlation_plot.png",  # ← use PNG instead of PDF
plot = plot_correlations,
device = "png",
width = 12,
height = 6,
units = "in",
dpi = 300,
bg = "transparent"  # ← this is key
)
plot_correlations
t_test_results <- d_combined_correlations %>%
group_by(method, correlation_type) %>%
dplyr::summarise(
mean_mean_correlation = mean(mean_correlation, na.rm = TRUE),
t_value = t.test(mean_correlation, mu = 0)$statistic,
p_value = t.test(mean_correlation, mu = 0)$p.value,
.groups = "drop"
)
print(t_test_results)
freesort_correlations <- d_freesort_correlations %>%
rename("mind_action_physiology_model" = `1_Mind-Body-Action`,
"finegrained_mind_action_physiology_model" = `2_PerCog-ObjDir-Stimulus`,
"physical_psychological_model" = `3_Physical-Ethereal`,
"use_phrase_embeddings_model" = `4_cosine_similarity`) %>%
pivot_longer(
cols = c("mind_action_physiology_model":"use_phrase_embeddings_model"),
names_to = "RDM_type",
values_to = "tau"
) %>%
select(subject_id, itemA, itemB, domain_itemA, domain_itemB, trial_type_order, freesort_distance, causal_distance, RDM_type, tau) %>%
mutate(
RDM_type = as.factor(RDM_type),
RDM_type = relevel(RDM_type, ref = "mind_action_physiology_model")
)
#ensure subject_id is a factor, for running simr later
freesort_correlations <- freesort_correlations %>%
mutate(subject_id = as.factor(subject_id))
#summarize to 1 row per subject per model
subject_level_data <- freesort_correlations %>%
distinct(subject_id, RDM_type, .keep_all = TRUE) %>%
select(subject_id, RDM_type, tau)
#Note: mind action physiology is reference model. Estiamtes are mean kendall's taus
model_freesort <- lmerTest::lmer(tau ~ RDM_type + (1 | subject_id),
data = subject_level_data)
summary(model_freesort)
d_freesort_correlations %>%
rename("mind_action_physiology_model" = `1_Mind-Body-Action`,
"finegrained_mind_action_physiology_model" = `2_PerCog-ObjDir-Stimulus`,
"physical_psychological_model" = `3_Physical-Ethereal`,
"use_phrase_embeddings_model" = `4_cosine_similarity`)
d_freesort_correlations %>%
rename("mind_action_physiology_model" = `1_Mind-Body-Action`,
"finegrained_mind_action_physiology_model" = `2_PerCog-ObjDir-Stimulus`,
"physical_psychological_model" = `3_Physical-Ethereal`,
"use_phrase_embeddings_model" = `4_cosine_similarity`) %>%
filter(subject_id == "subj_01") %>%
filter(itemA == "see something") %>%
filter(itemB == "become hungry")
dput(d_freesort_correlations %>%
rename("mind_action_physiology_model" = `1_Mind-Body-Action`,
"finegrained_mind_action_physiology_model" = `2_PerCog-ObjDir-Stimulus`,
"physical_psychological_model" = `3_Physical-Ethereal`,
"use_phrase_embeddings_model" = `4_cosine_similarity`) %>%
pivot_longer(
cols = c("mind_action_physiology_model":"use_phrase_embeddings_model"),
names_to = "RDM_type",
values_to = "tau"
) %>%
filter(subject_id == "subj_01") %>%
filter(itemA == "see something") %>%
filter(itemB == "become hungry"))
#for mind action and physiology model
d_target <- d_combined_correlations %>%
filter(correlation_type == "3 Category", method == "Sorting Task")
t_test <- t.test(d_target$mean_correlation, mu = 0)
t_test$estimate #mean Kendall's tau
t_test$conf.int
taus_causal <- d_causal_correlations %>%
rename("mind_action_physiology_model" = `1_Mind-Body-Action`,
"finegrained_mind_action_physiology_model" = `2_PerCog-ObjDir-Stimulus`,
"physical_psychological_model" = `3_Physical-Ethereal`,
"use_phrase_embeddings_model" = `4_cosine_similarity`) %>%
pivot_longer(
cols = c("mind_action_physiology_model":"use_phrase_embeddings_model"),
names_to = "RDM_type",
values_to = "tau"
) %>%
filter(RDM_type == "mind_action_physiology_model") %>%
rename("causal" = tau) %>%
distinct(subject_id, .keep_all = TRUE) %>%
select(subject_id, causal)
taus_freesort <- d_freesort_correlations %>%
rename("mind_action_physiology_model" = `1_Mind-Body-Action`,
"finegrained_mind_action_physiology_model" = `2_PerCog-ObjDir-Stimulus`,
"physical_psychological_model" = `3_Physical-Ethereal`,
"use_phrase_embeddings_model" = `4_cosine_similarity`) %>%
pivot_longer(
cols = c("mind_action_physiology_model":"use_phrase_embeddings_model"),
names_to = "RDM_type",
values_to = "tau"
) %>%
filter(RDM_type == "mind_action_physiology_model") %>%
rename("freesort" = tau) %>%
distinct(subject_id, .keep_all = TRUE) %>%
select(subject_id, freesort)
combined_taus <- taus_causal %>%
left_join(taus_freesort,
by = "subject_id") %>%
pivot_longer(cols = c(causal, freesort),
names_to = "task",
values_to = "tau") %>%
mutate(
task = as.factor(task),
task = relevel(task, ref = "freesort")
) %>%
mutate(subject_id = as.factor(subject_id))
model_prediction2 <- lmerTest::lmer(tau ~ task + (1|subject_id), data = combined_taus)
summary(model_prediction2)
ggplot(combined_taus, aes(x = task, y = tau)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray") +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Comparison of Tau Values by Task",
x = "Task",
y = "Tau") +
scale_fill_manual(values = c("Sorting Task" = "darkgray", "Causal Task" = "black")) + #bar fill
scale_color_manual(values = c("Sorting Task" = "lightgray", "Causal Task" = "#4A4A4A")) +
theme_bw()
ggplot(combined_taus, aes(x = task, y = tau, fill = task)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.5, aes(color = task)) +
scale_fill_manual(values = c("freesort" = "darkgray", "causal" = "black")) +  # Customize colors
scale_color_manual(values = c("freesort" = "darkgray", "causal" = "black")) + # Match colors for points
labs(title = "Comparison of Tau Values by Task",
x = "Task",
y = "Tau") +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(size = 14),  # Increase x-axis numbers
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
#get mean distances by item pairs
df_pair_means <- df_combined %>%
select(subject_id, itemA, itemB, freesort_distance, causal_distance) %>%
unite("item_pairs", itemA, itemB, sep = "_", remove = FALSE) %>%
group_by(item_pairs) %>%
summarize(mean_causal_distance = mean(causal_distance, na.rm = TRUE),
mean_freesort_distance = mean(freesort_distance, na.rm = TRUE)) %>%
ungroup() %>%
separate(item_pairs, c("itemA", "itemB"), sep = "_")
#get itemB pair means
# df_itemB_means <- df_pair_means %>%
#   group_by(itemB) %>%
#   mutate(mean_itemB_causal_distance = mean(mean_causal_distance, na.rm = TRUE),
#          mean_itemB_freesort_distance = mean(mean_freesort_distance, na.rm = TRUE)) %>%
#   ungroup()
#add domain labels
df_item_pair_means_domain <- df_pair_means %>%
left_join(df_combined %>%
select(itemA, itemB, domain_itemA, domain_itemB) %>%
distinct(),
by = c("itemA", "itemB")) %>%
relocate(domain_itemA, .after = "itemB") %>%
relocate(domain_itemB, .after = "domain_itemA") %>%
mutate(itemB = factor(itemB, levels = desired_order))
df_item_pair_means_domain_long <- df_item_pair_means_domain %>%
pivot_longer(
cols = c("mean_causal_distance", "mean_freesort_distance"),
names_to = "mean_type",
values_to = "values"
)
df_item_pair_means_freesort_minus_causal <- df_item_pair_means_domain_long %>%
pivot_wider(names_from = "mean_type",
values_from = "values") %>%
mutate(freesort_minus_causal = mean_freesort_distance - mean_causal_distance)
write.csv(df_item_pair_means_freesort_minus_causal, freesort_minus_causal_distances_output_path, row.names = F)
#similar item (item with lowest freesort_minus_causal)
similar_items <- df_item_pair_means_freesort_minus_causal %>%
group_by(itemB) %>%
slice_min(freesort_minus_causal)
#causal item (item with highest freesort_minus_causal)
causal_items <- df_item_pair_means_freesort_minus_causal %>%
group_by(itemB) %>%
slice_max(freesort_minus_causal)
# pdf("plot-items.pdf", width = 12, height = 12)  # Width and height are in inches
#visualize
#similar item (item with lowest freesort_minus_causal)
# df_item_pair_means_freesort_minus_causal %>%
#   group_by(itemB) %>%
#   arrange(freesort_minus_causal) %>%
#   ggplot(aes(itemB, freesort_minus_causal)) +
#   geom_point() +
#   geom_text(aes(label = itemA), nudge_x = 0.2, hjust = 0) +  # Moves text slightly to
#   facet_wrap(~itemB) +
#   theme(
#     #axis.text.x = element_text(angle = 90)
#     axis.text.x = element_blank()
#     )
#==========
arranged_items <- df_item_pair_means_freesort_minus_causal %>%
group_by(itemB) %>%
arrange(desc(freesort_minus_causal)) %>%
ungroup() %>%
arrange(itemB)
#Generate a unique color for each itemB
unique_items <- unique(arranged_items$itemB)
color_palette <- scales::hue_pal()(length(unique_items))  # Generate distinct colors
color_map <- setNames(color_palette, unique_items)
#Create the table with conditional formatting
arranged_items_table <- arranged_items %>%
gt() %>%
data_color(
columns = itemB,  #apply color to this column
colors = color_map
)
#arranged_items_table #uncomment this to view item distance values
gtsave(arranged_items_table, "figures/item-selection-counterfactual-task.png")
df_causal_first <- df_combined %>%
filter(trial_type_order == "causation_first")
df_freesort_first <- df_combined %>%
filter(trial_type_order == "causation_second")
# Getting causal RDMs
## causation-first group
df_causal_rdm_causation_first <- df_causal_first %>%
mutate(item_pairs = str_c(itemA, itemB, sep = "-")) %>%
group_by(item_pairs) %>%
mutate(mean_causal = mean(causal_distance, na.rm = TRUE)) %>%
ungroup() %>%
distinct(item_pairs, .keep_all = TRUE) %>%
select(itemA, itemB, mean_causal) %>%
pivot_wider(names_from = itemB, values_from = mean_causal) %>%
column_to_rownames("itemA")
df_causal_rdm_causation_first <- df_causal_rdm_causation_first[desired_order, desired_order]  #reorder rdm
## freesort-first group
df_causal_rdm_freesort_first <- df_freesort_first %>%
mutate(item_pairs = str_c(itemA, itemB, sep = "-")) %>%
group_by(item_pairs) %>%
mutate(mean_causal = mean(causal_distance, na.rm = TRUE)) %>%
ungroup() %>%
distinct(item_pairs, .keep_all = TRUE) %>%
select(itemA, itemB, mean_causal) %>%
pivot_wider(names_from = itemB, values_from = mean_causal) %>%
column_to_rownames("itemA")
df_causal_rdm_freesort_first <- df_causal_rdm_freesort_first[desired_order, desired_order]  #reorder rdm
# Getting freesort RDMs
## causation-first group
df_freesort_rdm_causation_first <- df_causal_first %>%
mutate(item_pairs = str_c(itemA, itemB, sep = "-")) %>%
group_by(item_pairs) %>%
mutate(mean_euclidean = mean(freesort_distance, na.rm = TRUE)) %>%
ungroup() %>%
distinct(item_pairs, .keep_all = TRUE) %>%
select(itemA, itemB, mean_euclidean) %>%
pivot_wider(names_from = itemB, values_from = mean_euclidean) %>%
column_to_rownames("itemA")
df_freesort_rdm_causation_first <- df_freesort_rdm_causation_first[desired_order, desired_order]  #reorder rdm
## freesort-first group
df_freesort_rdm_freesort_first <- df_freesort_first %>%
mutate(item_pairs = str_c(itemA, itemB, sep = "-")) %>%
group_by(item_pairs) %>%
mutate(mean_euclidean = mean(freesort_distance, na.rm = TRUE)) %>%
ungroup() %>%
distinct(item_pairs, .keep_all = TRUE) %>%
select(itemA, itemB, mean_euclidean) %>%
pivot_wider(names_from = itemB, values_from = mean_euclidean) %>%
column_to_rownames("itemA")
df_freesort_rdm_freesort_first <- df_freesort_rdm_freesort_first[desired_order, desired_order]  #reorder rdm
#flatten the upper tris, for correlation
flatten_rdm <- function(matrix) {
matrix[upper.tri(matrix)]
}
# Extract upper triangles
causation_rdm_correlation <- cor(flatten_rdm(as.matrix(df_causal_rdm_causation_first)),
flatten_rdm(as.matrix(df_causal_rdm_freesort_first)),
method = "pearson")
freesort_rdm_correlation <- cor(flatten_rdm(as.matrix(df_freesort_rdm_causation_first)),
flatten_rdm(as.matrix(df_freesort_rdm_freesort_first)),
method = "pearson")
print(paste0("Corr(causal rdm Causal Task first, causal rdm Sorting Task first): " , causation_rdm_correlation))
print(paste0("Corr(freesort rdm Causal Task first, freesort rdm Sorting Task first):  " , freesort_rdm_correlation))
#compute correlation difference
correlation_difference <- causation_rdm_correlation - freesort_rdm_correlation
print(paste0("correlation difference: ", correlation_difference))
#get upper tris
causation_first_rdm_correlation <- cor(flatten_rdm(as.matrix(df_causal_rdm_causation_first)),
flatten_rdm(as.matrix(df_freesort_rdm_causation_first)),
method = "pearson")
freesort_first_rdm_correlation <- cor(flatten_rdm(as.matrix(df_causal_rdm_freesort_first)),
flatten_rdm(as.matrix(df_freesort_rdm_freesort_first)),
method = "pearson")
print(causation_first_rdm_correlation)
print(paste0("Corr(causal rdm Causal Task first, freesort rdm Causal Task first): " , causation_first_rdm_correlation))
print(paste0("Corr(causal rdm Sorting Task first, freesort rdm Sorting Task first):  " , freesort_first_rdm_correlation))
#compute correlation difference
correlation_difference_orders <- freesort_first_rdm_correlation - causation_first_rdm_correlation
correlation_difference_orders
print(paste0("Correlation difference: " , correlation_difference_orders))
fisher_z <- function(r) {
return(0.5 * log((1 + r) / (1 - r)))
}
#convert correlations to Fisher's z
z1 <- fisher_z(causation_first_rdm_correlation)
z2 <- fisher_z(freesort_first_rdm_correlation)
N1 <- nrow(df_causal_rdm_causation_first)
N2 <- nrow(df_causal_rdm_freesort_first)
SE <- sqrt(1 / (N1 - 3) + 1 / (N2 - 3))
z_diff <- (z2 - z1) / SE #z score for the difference
p_value <- 2 * (1 - pnorm(abs(z_diff)))
print(paste("Z-score:", z_diff))
print(paste("P-value:", p_value))
